package test.ticket.tickettools.utils;

import com.alibaba.fastjson.JSONObject;
import org.bytedeco.javacpp.DoublePointer;
import org.bytedeco.opencv.global.opencv_core;
import org.bytedeco.opencv.global.opencv_imgcodecs;
import org.bytedeco.opencv.global.opencv_imgproc;
import org.bytedeco.opencv.opencv_core.Mat;
import org.bytedeco.opencv.opencv_core.Point;
import org.bytedeco.opencv.opencv_core.Scalar;
import org.bytedeco.tesseract.TessBaseAPI;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;

import static org.bytedeco.opencv.global.opencv_imgcodecs.imread;

public class ImageUtils {



    /**
     * base64转图片
     *
     * @param base64String
     * @param imagePath
     * @param width
     */
    public static void imagCreate(String base64String, String imagePath, Integer height, Integer width) {
        try {
            // 将 Base64 字符串解码为字节数组
            byte[] imageBytes = Base64.getDecoder().decode(base64String);
            // 创建 ByteArrayInputStream 以读取字节数组
            ByteArrayInputStream bis = new ByteArrayInputStream(imageBytes);
            // 使用 ImageIO 读取 ByteArrayInputStream 中的图像数据
            BufferedImage originalImage = ImageIO.read(bis);
            // 指定所需的宽度和高度
            int desiredWidth = width;
            int desiredHeight = height;
            // 创建调整后尺寸的图像
            BufferedImage adjustedImage = new BufferedImage(desiredWidth, desiredHeight, BufferedImage.TYPE_INT_RGB);
            Graphics2D g = adjustedImage.createGraphics();
            g.drawImage(originalImage, 0, 0, desiredWidth, desiredHeight, null);
            g.dispose();
            // 将图像保存到文件中
            File outputImage = new File(imagePath);
            ImageIO.write(adjustedImage, "png", outputImage);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void toBlackImag(String path, String name) {
        Mat imageMat = imread(path, opencv_imgcodecs.IMREAD_GRAYSCALE);
        opencv_imgproc.threshold(imageMat, imageMat, 215, 255, opencv_imgproc.THRESH_BINARY);
        opencv_imgcodecs.imwrite("./" + name + "_black.png", imageMat);
    }

    public static String getCaptchaCode(String path) {
        Mat imagePath = opencv_imgcodecs.imread(path);
        Mat grayImage = new Mat();
        opencv_imgproc.cvtColor(imagePath, grayImage, opencv_imgproc.COLOR_BGR2GRAY);
        Mat binaryImage = new Mat();
        opencv_imgproc.threshold(grayImage, binaryImage, 215, 255, opencv_imgproc.THRESH_BINARY_INV | opencv_imgproc.THRESH_OTSU);
        // Perform OCR
        TessBaseAPI tesseract = new TessBaseAPI();
        tesseract.Init("./", "eng"); // 指定tessdata路径和需要的语言数据
        tesseract.SetImage(binaryImage.data(), binaryImage.cols(), binaryImage.rows(), 1, binaryImage.cols());
        String result = tesseract.GetUTF8Text().getString();
        return result.trim().replaceAll(" ", "").replaceAll("\n", "");
    }

    public static Double getPoint(String backImagePath, String sliderImagePath, String uid) {
        Mat backImageMat = opencv_imgcodecs.imread(backImagePath, opencv_imgcodecs.IMREAD_GRAYSCALE);
        Mat sliderImageMat = opencv_imgcodecs.imread(sliderImagePath, opencv_imgcodecs.IMREAD_GRAYSCALE);
        opencv_imgproc.threshold(backImageMat, backImageMat, 215, 255, opencv_imgproc.THRESH_BINARY);
        opencv_imgproc.threshold(sliderImageMat, sliderImageMat, 215, 255, opencv_imgproc.THRESH_BINARY);
        //保存为黑白图片
        opencv_imgcodecs.imwrite("."+File.separator + uid + "_backBlack.png", backImageMat);
        opencv_imgcodecs.imwrite("."+File.separator + uid + "_sliderBlack.png", sliderImageMat);
        Mat result = new Mat();
        opencv_imgproc.matchTemplate(sliderImageMat, backImageMat, result, opencv_imgproc.TM_CCORR_NORMED);
        opencv_core.normalize(result, result, 1, 0, opencv_core.NORM_MINMAX, -1, new Mat());
        DoublePointer doublePointer = new DoublePointer(new double[2]);
        org.bytedeco.opencv.opencv_core.Point maxLoc = new org.bytedeco.opencv.opencv_core.Point();
        opencv_core.minMaxLoc(result, null, doublePointer, null, maxLoc, null);
        opencv_imgproc.rectangle(sliderImageMat, maxLoc, new Point(maxLoc.x() + backImageMat.cols(), maxLoc.y() + backImageMat.rows()), new Scalar(0, 255, 0, 1));
        try {
            Files.delete(Paths.get("./" + uid + "_backBlack.png"));
            Files.delete(Paths.get("./" + uid + "_sliderBlack.png"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        int real = maxLoc.x() * 330 / 310;
        //log.info("real:{}", real);
        return real * 310 / 330.0;
    }
    public static String mergeBase64Images(String base64Img1, String base64Img2) {
        try {
            // 解码Base64字符串
            byte[] imgBytes1 = Base64.getDecoder().decode(base64Img1);
            byte[] imgBytes2 = Base64.getDecoder().decode(base64Img2);

            // 将字节数组转换为BufferedImage
            BufferedImage img1 = ImageIO.read(new ByteArrayInputStream(imgBytes1));
            BufferedImage img2 = ImageIO.read(new ByteArrayInputStream(imgBytes2));
            // 合并图片
            BufferedImage mergedImage = mergeImages(img1, img2);
            // 将合并后的图片编码为Base64
            String mergedBase64 = encodeImageToBase64(mergedImage);
            return mergedBase64;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
    private static BufferedImage mergeImages(BufferedImage img1, BufferedImage img2) {
        int width = Math.max(img1.getWidth(), img2.getWidth());
        int height = img1.getHeight() + img2.getHeight();
        BufferedImage mergedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = mergedImage.createGraphics();
        g2d.drawImage(img1, 0, 0, null);
        g2d.drawImage(img2, 0, img1.getHeight(), null);
        g2d.dispose();
        return mergedImage;
    }

    private static String encodeImageToBase64(BufferedImage image) throws IOException {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ImageIO.write(image, "png", outputStream);
        byte[] imageBytes = outputStream.toByteArray();
        return Base64.getEncoder().encodeToString(imageBytes);
    }

    public static void main(String[] args) {
        String imag1="";
        String imag2="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";
        String s = mergeBase64Images(imag1, imag2);
        System.out.println(s);
        HttpHeaders getPointHeaders = new HttpHeaders();
        getPointHeaders.setContentType(MediaType.APPLICATION_JSON);
        getPointHeaders.set("user-agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36");
        JSONObject getPointBody = new JSONObject();
        getPointBody.put("image", s);
        getPointBody.put("direction", "bottom");
        getPointBody.put("click_num", "");
        getPointBody.put("token", "2J3UHYaDJTbELG55unhlt9JkNLKoLpcY9gsEOvbZ2Uc");
        getPointBody.put("type", "30228");
        HttpEntity getPointEntity=new HttpEntity(getPointBody,getPointHeaders);
        JSONObject getPointRes = TemplateUtil.getResponse(TemplateUtil.initSSLTemplate(), "http://api.jfbym.com/api/YmServer/customApi", HttpMethod.POST, getPointEntity);
        JSONObject getPointData = getPointRes.getJSONObject("data");
        String pointStr = getPointData.getString("data");
        String[] split = pointStr.split(",");
        System.out.println(pointStr);

    }
}
